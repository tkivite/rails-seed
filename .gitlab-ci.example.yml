---
image: docker:latest
services:
  - docker:dind
variables:
  # VERSION: Do not use. Will cause a db migration
  CI_VERSION: v0.0.1
  HEROKU_APP_NAME: dossier-api-staging
  HEROKU_REGISTRY_IMAGE: registry.heroku.com/dossier-api-staging/web
before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
stages:
  - build
  - test
  - deploy
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - public/
    - vendor/

build:
  stage: build
  only:
    - master
    - release
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_VERSION --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
    # - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

minitest:
  before_script:
    - echo "running test" # override parent before_script
  stage: test
  only:
    - merge_requests
    - master
    - release
  image: $CI_REGISTRY_IMAGE:latest
  services:
    - postgres:13.4
    - redis:5.0.7-alpine
  variables:
    REDIS_URL: redis://redis:6379/
    DATABASE_URL: postgres://postgres:mysecretpassword@postgres
    POSTGRES_PASSWORD: mysecretpassword
    RAILS_ENV: test
    RUBYOPT: -W0 # suppress Ruby 2.7 deprecation errors
    HOST: localhost
    PORT: 3000
  script:
    - bundle install
    - bundle exec rails db:create
    - bundle exec rails db:migrate
    - bundle exec rails test

rubocop:
  stage: test
  extends: minitest
  only:
    - master
    - release
  script:
    - bundle install
    - bundle exec rubocop
  allow_failure: false

bundle-audit:
  stage: test
  extends: minitest
  only:
    - master
    - release
  script:
    - bundle exec bundle audit check --update
  allow_failure: false

deploy-staging:
  before_script:
    - echo "Deploying staging to https://dossier-api-staging.herokuapp.com/"
    - apk add --no-cache curl
  stage: deploy
  only:
    - master
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker tag $CI_REGISTRY_IMAGE:latest $HEROKU_REGISTRY_IMAGE
    - docker login -u _ -p $HEROKU_TOKEN registry.heroku.com
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./.deploy/deploy_heroku.sh

deploy-production:
  before_script:
    - echo "running deployment" # override parent before_script
  image:
    name: registry.gitlab.com/dockerizers/gcloud-dev:latest
    entrypoint: [""]
  stage: deploy
  variables:
    ZONE: "europe-west6-a"
    CLOUDSDK_CORE_PROJECT: "instirs-playground"
    CLUSTER_NAME: "quikk-sandbox-1"
  only:
    - release
  script:
    - gcloud auth activate-service-account --key-file=$GITLAB_SERVICE_ACCOUNT
    - gcloud config set compute/zone $ZONE
    - gcloud container clusters get-credentials $CLUSTER_NAME
    - kubectl set image deployment/rails-api rails-api=$CI_REGISTRY_IMAGE:$CI_VERSION --record -n rails
    - kubectl set image deployment/sidekiq sidekiq=$CI_REGISTRY_IMAGE:$CI_VERSION --record -n rails
    - sed -i "s@\(image:\).*@\1 $CI_REGISTRY_IMAGE:$CI_VERSION@" .deploy/rails-migration-job.yaml
    - kubectl apply -f .deploy/rails-migration-job.yaml
    - |
      while ! [[ "$status" == "Complete" || "$status" == "Failed" ]]; do
        sleep 0.5
        echo "Getting status"
        status=$(kubectl get jobs rails-migration -n rails -o jsonpath='{.status.conditions[*].type}')
      done
      if [ "$status" == "Complete" ];
      then
        echo "Job Completed"
        kubectl delete job rails-migration -n rails
        exit 0
      else
        exit 1
      fi
